Day 1 (28/5/2022)
1. Revise JDBC 
2. Go through the readmes -- 


Day 2 (30/5/2022)
1. import day2.1 , in your eclipse (new workspace). Fix build path n change user name n password in DBUtils.
1.1 Revise CRUD application with employee.
1.2 Revise invocation n execution of stored procedure.

2. Follow the steps 
2.1 core java help : day1_help \installation instructions
Ensure that you are working with JDK 11 n STS 3.9.18

2.2 Refer to -- day2-data\day2_help\web server help\Updated steps in tomcat.txt
Ensure 
Apache Tomcat 9.0.36 is added n running fine in your IDE (advanced Java workspace)
Create a new dynamic web project (: day2_web_lab , as per the steps) n test HTML content , using chrome browser.
Stop web server(Tomcat)

Hands on

3. Refer to day2-data\day2_help\case studies\topic-tutorials.png

3.1 Refer to day1-data\day1_help\jdbc help\sql\topics-tutorials.txt"
Copy DDL n DML for : users , topics n tutorials table.

3.2 
Solve 
Create new java project : day2_assignment .
Add my sql connector in build path.

Layered app 
Tester ---DAO --- DBUtils (openCn , getCn , closeCn) --POJO/s --DB 

Solve  
1. User Login
i/p : email ,password
o/p :Return User details in case of successful login or an error  message, in case of invalid login.

Hint :  IUserDao : i/f
User authenticateUser(String email,String pwd) throws SQLException
Steps
1. Table -- users
2. POJO cls -- User
properties --id | name    | email          | password | reg_amt | reg_date   | role 
Def ctor , all getters n setters , toString

2.5 DBUtils ---openCn , closeCn , getCn

3. DAO :
3.1 IUserDao : i/f
User authenticateUser(String email,String pwd) throws SQLException
In case of successful login --ret User object , populated with use details lifted from DB
o.w --null
3.2 UserDaoImpl
state --conn , pst1 
def ctor ---getCn , pst1=.....
cleanUp -- close psts
CRUD : set IN params , execQuery --RST --if(rst.next()) --- ret user details else ret null

4. Tester
init --sc, openCn, create dao
service --call CRUD method
destroy --cleanUP Dao , close cn



2. Change password
i/p : email ,password , new password
o/p : A message indicating success or failure.

Hint :  IUserDao : i/f
String changePassword(email ,password , new password) throws SQLException

3. Get all available topics.
Hint : ITopicDao
List<Topic> getAllTopics() throws SE.

Day 3
Please follow this exact sequence in today's lab , for complete revision n clarity.

Refer to today's sequence.txt , diagrams , readmes for better understanding n revise.

NOTE : Use web browser's inspect option , to trace request response flow.

Steps
1. Create a new dynamic web project (check web.xml checkbox) : eg day3_lab

1.1 Create a welcome page : index.html
Add a link : to invoke the servlet (which will be deployed using @WebServlet annoatation)

1.1 Request URL  sent from clnt --> server, after clicking of the link
http://host:port/day3_lab/test1
URI : /day3_lab/test1
URL Pattern : /test1


Create FirstServlet.java , override life cycle methods & trace the life cycle.
Use @WebServlet annoatation
Use lazy loading policy.

1.2 Add another link in index.html : to invoke the servlet (which will be deployed using xml tags)

Create SecondServlet.java , override life cycle methods & trace the life cycle.
Do NOT Use @WebServlet annoatation , instead add xml tags in web.xml
Use eager loading policy.

-----------------------------------------
What will happen ?

1.3 Add / in anchor tag's href. Observe n conclude
URL : http://localhsot:8080/test1
Resp :HTTP 404

1.4 Remove / from the url-pattern . Observe n conclude
Obs : WC (Server side JVM) throws : IllegalArgumentException --- invalid URL pattern !!!!!!!!!!!!


1.5 Give same url-pattern to 2 different servlets . Observe n conclude
Obs : Web server simply DOES NOT start
WC (Server side JVM) throws : IllegalArgumentException ---multiple servlets CAN NOT have SAME url-pattern




1.6 Can one servlet be deployed under multiple url patterns -- YES 


Common Troubleshooting Tips
1. Stop web server
2. R Click on Tomcat server --- add n remove --Remove All : This will un deploy all web apps from the server.
3. R Click on Tomcat server --clean
4. R Click on Tomcat server --clean tomcat work directory
5. Start server (If it starts correctly => no server issues!)
6. Clean Project n deploy the dynamic web project n test it.
7. After deploying the project , if you are getting HTTP 404 , on the client side --check if you have added a welcome page correctly under the root of web app(i.e under src/main/webapp)


1.7 Add a new link in index.html : for User Login
Copy login.html from day3-data\day3_help\HTML pages\login.html under src\main\webapp(i.e context root of the web application)
Write a LoginServlet 
override init , do???? n destroy 
Perform user authentication.


Day 4
1. import day4.1 , to revise 
1.1 Servlet JDBC integration
1.2 Page Navigation
Clicking on a button/link : Client Pull I
Redirect scenario : Client Pull II
(refer to diagrams , readmes n code sample)

2. import day4.2 , to revise
Cookie based session tracking
(Test it with cookies enabled n later disabled)

MUST use "inspect" option in the browser , to trace request n response flow.

Revision
1. Req : http://host:port/day4.2
Resp : login form.

2. After submitting form (CP I)
http://host:port/day4.2/validate
@ dep time --WC --cls loading --instance --init ---db cn n psts
@ req processing time --HttpSrvlet's  public service ---> protected service ---> doPost --> 
 in case of invalid login : resp ---retry link
in case of valid login ---resp --- temp redirect resp (SC 302 | Location , Set-Cookie | Body : empty)
web browser : chks cookies accepted or blocked from web site --blocked --- cookie/s won't be stored.
=> session tracking fails !!!!!!!!!!!!!!
accepted --- cookie age --def age =-1 => cookie will be stored browser's cache

3. in case of valid login -- Web browser generated next request
URL -- http://host:port/day4.2/topics
Method -- GET 
Header --cookie --user_details : value
WC ---> HttpSrvlet's  public service ---> protected service ---> doGet : TopicsServlet
--> retrived user details from cookie --sent it in the resp.

4. After choosing the topic , 
http://localhost:8080/day4_lab/tutorials?topic_id=1


Hands on
1. Complete topics page
(dynamic form generation)

2. Complete DAO layer for entire case study (customer part)
2.1 Display all available tutorial names , under selected topic , sorted as per visits , in desc order.
i/p : topic id
o/p : List<String>containing  tutorial names only.

Hint : 
ITutorialDao
List<String> getAllTutorialNamesByTopic(int topicId) throws SE;


2.2 Get selected  tutorial details by name
i/p : tutorial name 
o/p : tutorial details (Tutorial)
Hint : 
ITutorialDao
Tutorial getTutorialDetailsByName(String tutName) throws SE;

2.3 Update visits (incr by 1)
i/p tutorial name
o/p A message indicating updated visit count or error mesg
Hint : 
ITutorialDao
String updateVisits(String tutName) throws SQLException;

Day 5

1. import day5_cms in your workspace. Edit DB user name , pwd n db name if needed.
Trace n revise entire flow as explained in the theory session.


Day 6
1. import day6.1 , in your workspace. Edit DB user name , pwd n db name if needed.
Revise Server Pull : RequestDispatcher's forward scenario

2. import day6.2 , in your workspace. Edit DB user name , pwd n db name if needed.
Revise Server Pull : RequestDispatcher's include scenario

3. import day6_cms , in your workspace. Edit DB user name , pwd n db name from web.xml file.
Revise ServletConfig , ServletContext n web app listeners

4. Check day6-data\day6_help\demo of config_vs_ctx\config_vs_ctx : project to understand config vs context

5. Try to complete , voting application : voter role part.


Day 7
Please follow exactly same sequence in the lab

1. import day7.1 in your workspace n revise basics of JSP , by tracing all the links from index.jsp
Get familiar with JSP scripting elements n EL syntax.

2. Do complete , voting application : voter role part , with the help of lab faculty
Pls arrange a poll n submit it on Monday morning 
Poll Question : Have you completed Voting assignment in servlets , for voter role ?

3. If time permits , solve this OPTIONAL JSP assignment
refer : day7-data\JSP Assignment.png

Day 8
1. import to day7_assgn , for solution of day7's : OPTIONAL JSP assignment
(just refer to index.jsp n trace)

2. import day8.1 for
(just refer to index.jsp n trace)
2.1 URL rewriting
2.2 Error Page handling
2.3 include directive
2.5 RD related actions

3. import day8.2 , edit DBUtils , as per your DB settings
Revise JavaBean : UserBean

Day 9
1. import day9.1 , edit DBUtils , as per your DB settings
Trace complete flow from JSP to DB , starting from login.jsp ---till logout.jsp
(go through java beans n JSP actions carefully)

2. We will discuss hands on later.
2.1 Either continue with customer flow in CMS
OR
2.2
Port online voting assignment in JSP using JavaBeans

Day10
1. import day10.1 as existing maven project .
OR still better
Refer to "lab-sequence" n create from scratch day10_assignment , maven based basic hibernate project
1.1 Confirm Maven dependencies
1.2 edit hibernate.cfg.xml
1.3  Create HibernateUtils to get SessionFactory n test bootstrapping of hibernate.
1.4 Create User POJO from scratch , add JPA annoatation n confirm auto table generation
1.5 Create hibernate based DAO layer n test saving of user details : using openSession API
1.6 Create hibernate based DAO layer n test saving of user details : using getCurrentSession API

2. import day9_voting n revise n trace entire flow.

Hand on
1. Copy earlier hibernate project into day10_assgn2
2. After copying --
2.1 hibernate JARs -- YES 
2.2 hibernate.cfg.xml -- YES
edit db config (user name n pwd) (delete <mapping> entry)
2.3 Create from scratch HibernateUtils
2.4 Refer to voters 
Create Voter POJO or copy earlier
change : voter id :int --->  Integer
Add JPA annotations
@Entity , @Table(name="voters") , @Id , @GeneratedValue(strategy=GenerationType.IDENTITY) , for email @Column(unique=true)

2.5 Add <mapping class="pojos.Voter"/>
2.6 Objective
Voter registration
IVoterDao
String registerVoter(Voter voter);
2.7
VoterDaoImpl imple. IVoterDao
state --none
constr or cleanUp --no 
CRUD method
public String registerVoter(Voter voter)
{
  1. get session from SF --getCurrentSession
2. begin Tx
3. try {
   Integer id=(Integer)session.save(voter);
   tx.commit();
}


4. catch : RunTimeExc 
  rollback tx --throw ex 
  
}


2.8
No menu based Tester pls!!!!!!!!!!!!!!!!!!!!
Add a simple tester
1. scanner , sf : try with resources
create dao instance
accept voter details --except id
call dao's method
test it!



Day 11
1. import day11.1 in your workspace , as existing maven project.
Edit hibernate.cfg.xml , as per your DB settings

Revise by opening the testers n tracing Tester -- DAO --POJO layers in hibernate

2. We will discuss the "hands on" after your revision completes
2.1 Objective --delete user details for those users reg date > dt & reg amount < amount
Bulk deletion

3. Integration of hibernate in a web app : OPTIONAL
Steps
3.1 Copy from earlier maven based hibernate project --day11_voting from day11.1
(maven based Java SE app)
remove pojo n dao layer n tester ,<mapping> 
TestHibernate.java

3.2 Copy Voter n Candidate POJOs (JPA annotated)

3.3 Copy earlier DAO i/f n make necessary changes
1. IVoterDao

	Voter authenticateUser(String name,String pwd);
	//add a method : to change voting status
	String updateVotingStatus(int voterId);

2. Create Hibernate based DAO impl class
2.1 JPQL --getSingleResult
2.2 session.get --setter OR JPQL --setter

2. ICandidateDao
//add a method to ret list of all candidates 
	List<Candidate> getAllCandidates() ;
	// add a method to incr votes for a specific candidate
	String incrementCandidateVotes(int candidateId) ;


1. JPQL --getResultList
2.  session.get --setter OR JPQL --setter

3.4 Tester


Day 12
1. import day12.1 in your workspace .
Edit hibernate.cfg.xml , as per your DB settings
Using today's sequence , revise save vs persist n BLOB(image) handling

2. Refer : hibernate session API
Test save vs persist vs saveOrUpdate vs merge
(by making chnages in the DAO layer)

3. import day12_sms in your workspace .
Edit hibernate.cfg.xml , as per your DB settings
Refer to ER diagram
Focus upon the entities : Student , Course n Admission
Refer to MappedSuperclass

I have added more testers in this project. Have a look . 
We will revise it all later.

4. Answer this
Can a student in our Student management system , take admission for more course than one ? YES
If yes ...show me how ?
(write code)
User i/p : student id(PK)  or email , course  id (PK) or title
Add a new method : in AdmissionDao
get persistent student from i/p --s 
get persistent course from i/p -- c
Admission newAdmit=new Admission(s,c);
persist

5. If time permits , we will integrate hibernate in a maven based web app.

Day13
Refer to today's sequence

1. Refer to E-R diagram : 
day13-data\day13_help\Student management system E-R diagram1.png

import day13_sms n revise , bi-dir , one-to-one associaton between Student n Address

2. Refer to : 
day13-data\day13_help\Alternate Student management system E-R diagram.png

 import day13_sms2 n revise , uni-dir , one-to-one associaton between Student n Address n also many-to-many

3. With the help of lab faculties : 
Refer : day13-data\day13_help\maven instructions dyn web app with hibernate.txt"
OR better suggestion , import day13_web_hibernate_maven , as existing maven project in your workspace n try integration of web app + hibernate


Day14
1. import day14_sms , to revise value types in Hibernate

2. import day14_spring , revise basic spring bean life cycle.

3. Hands on
3.1 Integration n testing of web app + hibernate for voting assignment


Day15

1. import all of these projects , refer to spring bean life cycle n spring wiring diagrams n revise .
day15.1 -- complete bean life cycle , setter Based D.I
day15.2 -- Constr based D.I
day15.3 -- factory based D.I
day15.4 -- auto wiring by name
day15.5 -- auto wiring by type
day15.6 -- auto wiring using ctor based D.I
day15.7 --annotation based instructions + XML (hybrid approach)
day15.8 --annotation based instructions using java config classes.

2. After complete revision , continue to revise MVC overview
day15_mvc_hibernate

3. Revise completed blocks of spring MVC
day15_spring_mvc


Day16
1. import day16.1 to revise spring MVC basics
1.1 Flow
1.2 Model attributes 
1.3 ModelAndView 
1.4 Model Map

2. import day16.2 to revise the  integration of spring MVC n Hibernate
Edit database.properties file from <resources> , as per your db settings.

3. We will discuss fresh hands on later.
Steps
1. Copy from earlier day16.2 , empty the contents
2. Bottoms up approach
3. Employee
id name adr salary joindate + Department dept (@ManyToOne , @JoinColumn)

Department 
id , name , location

4. Dept Dao --add method
@Repository , SF : @AutoWired + @Transactional

5. Emp Dao -- add method
@Repository , SF : @AutoWired +  @Transactional
6. Skip service layer : no B.L

7. Controller --- dependency : dao layer
8. View Layer : JSPs

Req resp flow
http://host:port/day16_lab ---controller -- fetch dept names -- forward to jsp


req : http://localhost:8080/spring_mvc_hibernate/employee/list?dept_name=Marketing

Day17

1. Create spring boot app from scratch. Replace native hibernate based DAO layer by JPA n test the yesterday's assignment : day16_lab (with emp n dept)
refer to steps mention in : "spring boot sequence.txt"

2. import day17_boot in your workspace. Edit application.properties files ,as per your DB settings
Trace entire web app till tutorials.jsp


3. Install lombok library n reduce boilerplate code

4. Install react app n keep it ready.
npm install
npm start

5.  We will discuss hands on later.
Complete customer flow.

For extra practice : 
Start with admin flow.
status.jsp ---> a link "Add New Tutorial" --->new tut form  (anything dynamic ????) --> submit the form ---> validate i/ps --> in case of success --add new tut details in DB --> redirect clnt to status page 
Add logout link.

in case of validation failures --> forward client to the form again , highlighted with errs.


Day18

1. import day18_boot_cms to revise
1.1 Log out feature (auto refresh)
1.2 Spring Data JPA (Important !)
1.3 2 way data binding with Spring form tags (Important !)
1.4 Bad Request 400 : caused due to invalid date format sent by client n it's solution

2. After your revision completes , we will do common revision of the admin flow.

3. React project walk through

4. Optional : new hands on work.
(refer to assignment1 modified" diagram)

Day 19
NO new work !!

1. import day19_EMS_backend , to revise
1.1 CRUD operations on Employee resource
1.2 Test it with postman client , by sending URLs 
OR
You can import "day19-data\day19_help\EMS.postman_collection.json" into your postman client 
n test all end points.
1.3 Integrate it with react "my-app" (front end) n test it.


2. import day19_EMS_backend , to revise : ResponseEntity


Day 20

1. import day20_ems_backend n revise
1.1 Validations
1.2 Global Exception Handling

2. import spring-boot-aop , to revise AOP

Hands on 

3. For More Practice in Spring Data JPA : continue with  "day20_ems_backend" project
refer : Spring Data JPA reference guide.

3.1 Find all emps drawing salary > specific value

3.2  Find all emps from specific department n location

3.3 Apply increment to  employee's salary for a specific department.
eg URL :  http://localhost:8080/api/employees/department/{dept}/increment/{incr}
2 approaches :
select n update  
OR 
Bulk Update 
using @Modifying with DML

4. In "day20_ems_backend" project , Handle resource not found exception in global manner , sending error code  : HTTP 404


5. Understand difference (with code) 
session.load / EntitiyManage.getReference /JpaRepository.getById(or getReferenceById)


6. Use @Around from AOP , to measure the time taken for servicing of client request. 


Day21
1. import spring_boot_aop project : to revise  @Around advice & concept of proxies n targets


2. import day21.1 as existing maven project -- non spring boot , based on native hibernate 
Revise : get vs load
(use diagrams)

3. import day21.2 , a spring boot project , to revise
3.1 findById(eager) vs getById / getReferenceById(lazy) 
3.2 DTOs n Entities , ModelMapper n it's configuration
3.3 Additional annotations n properties 
3.4 Image upload --partially complete.

Hands on
1. Image upload n download : completed!
1.5 Do try with react front end !

2. OPTIONAL Work
Emp auth : objective for revision of dto pattern --AuthRequestDTO : email n pwd
Request payload  : email/user name n password
Method : POST
Resp : in case of success : return validated emp details : DTO
OR Error resp DTO


3. Proceed to CMS backend : OPTIONAL


Day22
1. import spring-boot-thymeleaf , to revise thymeleaf basics
(This is an exam objective, so don't overspend time on it. Just look at thymeleaf html templates to get the idea)

2. import spring-boot-bookstore , to revise 
2.1 Composite PK 
2.2 Composite FK
2.3 one to many bi dir association between Author n Book
2.4 Run the test cases . 

3. MOST IMPORTANT
import day22_spring_security , to revise spring security basics
refer to a readme : "regarding spring security.txt" n diagrams for complete understanding
We will replace in mem authentication by DAO based auth. in the lab, as a hands on


Day 23
1. import day22_lab , to revise spring security for basic authentication

2. Refer to JWT details , steps n diagrams
import day23_jwt , to revise  spring security with JWT based authorization.

3. Test it with postman client.
3.1 post request
3.2 get request with JWT

NOTE : 
Currently you won't be able to test the /admin n /user with swagger. It needs additional swagger config.

4. We will discuss hands on later.
Project objective : 
4.1 What if , you want the following authorization rules ?
end points :  /home or /api/auth/signin or /api/auth/signup : permit all (no authentication required)
end point : /user : client has to be authenticated , ANY role would do 
end point : /admin : client has to be authenticated n only ADMIN user can access this end point
end point : /topic/add : client has to be authenticated n only ADMIN user can access this end point
end point : /topic/view : client has to be authenticated , ANY role would do 

4.2 What will happen ?
If user presents wrong credentials , what is the response REST server is sending currently ?
??????
Correct or incorrect (can it be more appropriate ?)
HOW ?????

4.3 Add new end point :
/api/auth/signup : no authentication required , since user is registering here
1. request payload : User DTO (containing user info + roles info)
What will be the data members of User DTO ?
payload  : { user fields , ["ADMIN","AUTHOR"]
}
Steps 
1.1 Controller ---> service layer method (UserRegistration Service) --> map dto --> entity
Will you need to do more than just mapping ?????

1.2 persist new user data
Expected o/p : 
1 rec in users table
1 rec in the child (link : users_roles) table

1.3 Send back : user reg status message : wrapped in Resp DTO


5. As a warm up for your actual project , try to integrate your latest learnings in CMS backend.
Requirement analysis
5.1 User login n registration + upload image , profile
5.2 Admin User : add new topic , delete existing topic
5.3 Author : add new tut under existing topic
5.4 Normal User : read tutorial , add comment